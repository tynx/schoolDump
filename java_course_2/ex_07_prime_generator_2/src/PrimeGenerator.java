import java.util.ArrayList;
/**
 * This class is handling the PrimeGenerator-Threads. It itself calculates the
 * sequence of primes for the given stdin-argument. 
 * 
 * @author tim luginbuehl (lugtim@gmail.com // tynx.ch)
 * @author jerome jamin (jerome.jamin@gmail.com)
 */
public class PrimeGenerator {
	
	/**
	 * Number of loops
	 */
	private int loops = 0;
	
	/**
	 * Number of Threads which are involved in calculating the prime
	 * numbers
	 */
	private int threadCount = 0;
	
	/**
	 * Time which the multiple thread calculation needs
	 */
	private int multipleThreadTime = 0;
	
	/**
	 * delay per prime-calculation for the threads in ms
	 */
	private static final int DELAY = 0;
	
	/**
	 * List of all treads
	 */
	private ArrayList<PrimeGeneratorThread> threads = new ArrayList<PrimeGeneratorThread>();
	
	/**
	 * List of all prime numbers generated by multiple threads
	 */
	private ArrayList<Integer> primesFromMultipleThreads = new ArrayList<Integer>();
	
	/**
	 * Main thread
	 */
	private PrimeGeneratorThread mainCalc = null;

	/**
	 * Entry point which starts the programm 
	 * @param args
	 */
	public static void main(String[] args) {
		main2(new String[] {"10000", "10"});
	}
	
	/**
	 * args are parsed for the given loop and the given amount of threads
	 * @param args first argument should be the amount of loops
	 */
	public static void main2(String args[]) {
		if (args.length != 2) {
			System.out.println("usage: java PrimeGenerator <number loops> <number threads>");
			return;
		}
		int loops = Integer.parseInt(args[0]);
		int threadCount = Integer.parseInt(args[1]);
		new PrimeGenerator(loops, threadCount);
	}
	
	/**
	 * This constructor starts the calculation
	 * @param loops
	 * @param threadCount
	 */
	public PrimeGenerator(int loops, int threadCount) {
		this.loops = loops;
		this.threadCount = threadCount;
		calcSingleThread();
		calcMultipleThreads();
		printResults();
	}
	
	/**
	 * This method calculates all primnumbers in one single thread
	 */
	private void calcSingleThread() {
		this.mainCalc = new PrimeGeneratorThread(0, this.loops, "PrimeGeneratorThread[Main]", DELAY);
		this.mainCalc.run();
	}
	
	/**
	 * This method calculates all primnumbers in serveral threads, stores the results from the
	 * separated threads in one Array and takes the sum of the whole calculation time
	 */
	private void calcMultipleThreads() {
		int range = this.loops / this.threadCount;
		int min = 0;
		int max = 0;
		
		for(int i = 0; i < this.threadCount; i++) {
			min = (i == 0) ? 0 : range * i + 1;
			max = (this.threadCount - i > 1) ? max = (i + 1)* range : this.loops;
			PrimeGeneratorThread multipleCalc = new PrimeGeneratorThread(min, max, String.format("PrimeGeneratorThread[%d-%d]", min, max), DELAY);
			multipleCalc.run();
			this.threads.add(multipleCalc);	
		}
		
		for(PrimeGeneratorThread thread : this.threads) {
			this.primesFromMultipleThreads.addAll(thread.getPrimes());
			this.multipleThreadTime += thread.getCalcTime();
		}
	}
	
	/**
	 * This method compares and prints the results of the two calculations
	 */
	private void printResults() {
		long sumOfTime = 0;
		int sumOfPrimes = 0;
		
		System.out.println(String.format("time used by MainThread: %d ms", this.mainCalc.getCalcTime()));
		System.out.println(String.format("time used by %d-Threads: %d ms", this.threadCount, this.multipleThreadTime));
		
		if(this.mainCalc.getPrimes().equals(this.primesFromMultipleThreads)){
			System.out.println("the results are equal\n\n");
		}else {
			System.out.println("the results aren't equal\n\n");
		}
		System.out.println(String.format("name:\t%s\t\t time:\t%d ms\t\t sum of primes:\t%d", mainCalc.getThreadName(), 
				mainCalc.getCalcTime(), mainCalc.getPrimes().size()));
		System.out.println("-------------------------------------------------------------------------------------------------");
		for(PrimeGeneratorThread thread : this.threads) {
			System.out.println(String.format("name:\t%s\t\t time:\t%d ms\t\t sum of primes:\t%d", thread.getThreadName(), 
					thread.getCalcTime(), thread.getPrimes().size()));
					sumOfTime += thread.getCalcTime();
					sumOfPrimes += thread.getPrimes().size();
		}
		System.out.println("-------------------------------------------------------------------------------------------------");
		System.out.println(String.format("total:\t\t\t\t\t\t time:\t%d ms \t\t sum of primes:\t%d", sumOfTime, sumOfPrimes));
	}
}
